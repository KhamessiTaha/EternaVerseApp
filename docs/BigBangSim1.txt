import { useRef, useEffect, useState, useMemo } from 'react'
import { Canvas, useFrame, useThree } from '@react-three/fiber'
import * as THREE from 'three'
import { EffectComposer, Bloom } from '@react-three/postprocessing'
import { OrbitControls, Stars } from '@react-three/drei'
import { useControls } from 'leva'

const BigBangSimulation = () => {
  const [stage, setStage] = useState('singularity')
  const [timeElapsed, setTimeElapsed] = useState(0)
  
  // Simulation stages with durations (seconds)
  const STAGES = {
    singularity: 3,
    expansion: 8,
    particleFormation: 5,
    galaxyFormation: 10,
    cosmicWeb: 15
  }

  // Update simulation stage based on elapsed time
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeElapsed(prev => {
        const newTime = prev + 0.1
        updateStage(newTime)
        return newTime
      })
    }, 100)
    return () => clearInterval(timer)
  }, [])

  const updateStage = (time) => {
    let accumulated = 0
    for (const [stageName, duration] of Object.entries(STAGES)) {
      if (time >= accumulated && time < accumulated + duration) {
        if (stage !== stageName) setStage(stageName)
        return
      }
      accumulated += duration
    }
  }

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <Canvas camera={{ position: [0, 0, 200], fov: 60 }}>
        <ambientLight intensity={0.2} />
        <pointLight position={[0, 0, 0]} intensity={2} distance={1000} />
        
        <SimulationStage stage={stage} timeElapsed={timeElapsed} />
        
        <EffectComposer>
          <Bloom
            intensity={stage === 'expansion' ? 2 : 1}
            radius={0.5}
            luminanceThreshold={0}
            luminanceSmoothing={0.9}
          />
        </EffectComposer>
        
        <OrbitControls enableDamping dampingFactor={0.05} />
      </Canvas>
      
      <div style={{
        position: 'absolute',
        bottom: '20px',
        left: '20px',
        color: 'white',
        fontFamily: 'sans-serif',
        backgroundColor: 'rgba(0,0,0,0.5)',
        padding: '10px',
        borderRadius: '5px'
      }}>
        <h2>Big Bang Simulation</h2>
        <p>Stage: {stage}</p>
        <p>Time: {timeElapsed.toFixed(1)}s</p>
      </div>
    </div>
  )
}

const SimulationStage = ({ stage, timeElapsed }) => {
  const particleSystemRef = useRef()
  const galaxySystemRef = useRef()
  const nebulaRef = useRef()
  const { viewport } = useThree()

  // Particle system parameters based on stage
  const particleParams = useMemo(() => {
    switch(stage) {
      case 'singularity':
        return { count: 0, size: 0, color: 0xffffff }
      case 'expansion':
        return { count: 20000, size: 2, color: 0xffaaaa }
      case 'particleFormation':
        return { count: 50000, size: 1.5, color: 0xaaaaff }
      case 'galaxyFormation':
        return { count: 100000, size: 1, color: 0x88aaff }
      case 'cosmicWeb':
        return { count: 150000, size: 0.8, color: 0x5599ff }
      default:
        return { count: 0, size: 0, color: 0xffffff }
    }
  }, [stage])

  // Create particle system data
  const particles = useMemo(() => {
    const positions = new Float32Array(particleParams.count * 3)
    const velocities = new Float32Array(particleParams.count * 3)
    const colors = new Float32Array(particleParams.count * 3)
    
    const color = new THREE.Color(particleParams.color)
    
    for (let i = 0; i < particleParams.count; i++) {
      const i3 = i * 3
      
      // Initial positions (all at origin for singularity)
      positions[i3] = 0
      positions[i3 + 1] = 0
      positions[i3 + 2] = 0
      
      // Random velocities (spherical distribution)
      const theta = Math.random() * Math.PI * 2
      const phi = Math.acos(Math.random() * 2 - 1)
      const speed = 0.5 + Math.random() * 0.5
      
      velocities[i3] = speed * Math.sin(phi) * Math.cos(theta)
      velocities[i3 + 1] = speed * Math.sin(phi) * Math.sin(theta)
      velocities[i3 + 2] = speed * Math.cos(phi)
      
      // Colors with slight variation
      colors[i3] = color.r * (0.9 + Math.random() * 0.2)
      colors[i3 + 1] = color.g * (0.9 + Math.random() * 0.2)
      colors[i3 + 2] = color.b * (0.9 + Math.random() * 0.2)
    }
    
    return { positions, velocities, colors }
  }, [particleParams])

  // Create galaxy system data (appears later)
  const galaxies = useMemo(() => {
    if (stage !== 'galaxyFormation' && stage !== 'cosmicWeb') return null
    
    const count = 5000
    const positions = new Float32Array(count * 3)
    const colors = new Float32Array(count * 3)
    
    for (let i = 0; i < count; i++) {
      const i3 = i * 3
      positions[i3] = (Math.random() - 0.5) * 1000
      positions[i3 + 1] = (Math.random() - 0.5) * 1000
      positions[i3 + 2] = (Math.random() - 0.5) * 1000
      
      // Galaxy colors (mostly white with some variation)
      colors[i3] = 0.7 + Math.random() * 0.3
      colors[i3 + 1] = 0.7 + Math.random() * 0.3
      colors[i3 + 2] = 0.7 + Math.random() * 0.3
    }
    
    return { positions, colors }
  }, [stage])

  // Create nebula texture (appears last)
  const nebulaTexture = useMemo(() => {
    if (stage !== 'cosmicWeb') return null
    
    const size = 512
    const canvas = document.createElement('canvas')
    canvas.width = size
    canvas.height = size
    const ctx = canvas.getContext('2d')
    
    // Radial gradient
    const gradient = ctx.createRadialGradient(
      size/2, size/2, size/8,
      size/2, size/2, size/2
    )
    gradient.addColorStop(0, 'rgba(50, 0, 100, 0.8)')
    gradient.addColorStop(1, 'rgba(0, 0, 0, 0.0)')
    ctx.fillStyle = gradient
    ctx.fillRect(0, 0, size, size)
    
    // Star noise
    for (let i = 0; i < 1000; i++) {
      ctx.fillStyle = `rgba(255,255,255,${Math.random() * 0.1})`
      ctx.fillRect(Math.random() * size, Math.random() * size, 1, 1)
    }
    
    return new THREE.CanvasTexture(canvas)
  }, [stage])

  // Animation frame updates
  useFrame((state, delta) => {
    // Update main particle system
    if (particleSystemRef.current) {
      const positions = particleSystemRef.current.geometry.attributes.position.array
      const velocities = particles.velocities
      const expansionSpeed = 50 * (stage === 'expansion' ? 2 : 1)
      
      for (let i = 0; i < particleParams.count; i++) {
        const i3 = i * 3
        positions[i3] += velocities[i3] * expansionSpeed * delta
        positions[i3 + 1] += velocities[i3 + 1] * expansionSpeed * delta
        positions[i3 + 2] += velocities[i3 + 2] * expansionSpeed * delta
      }
      
      particleSystemRef.current.geometry.attributes.position.needsUpdate = true
    }
    
    // Rotate nebula slowly
    if (nebulaRef.current) {
      nebulaRef.current.rotation.y += 0.001
    }
  })

  return (
    <>
      {/* Main particle system */}
      {particleParams.count > 0 && (
        <points ref={particleSystemRef}>
          <bufferGeometry>
            <bufferAttribute
              attach="attributes-position"
              array={particles.positions}
              count={particleParams.count}
              itemSize={3}
            />
            <bufferAttribute
              attach="attributes-color"
              array={particles.colors}
              count={particleParams.count}
              itemSize={3}
            />
          </bufferGeometry>
          <pointsMaterial
            size={particleParams.size}
            vertexColors
            transparent
            opacity={0.8}
            blending={THREE.AdditiveBlending}
            depthTest={false}
          />
        </points>
      )}
      
      {/* Galaxy system (appears later) */}
      {galaxies && (
        <points ref={galaxySystemRef}>
          <bufferGeometry>
            <bufferAttribute
              attach="attributes-position"
              array={galaxies.positions}
              count={galaxies.positions.length / 3}
              itemSize={3}
            />
            <bufferAttribute
              attach="attributes-color"
              array={galaxies.colors}
              count={galaxies.colors.length / 3}
              itemSize={3}
            />
          </bufferGeometry>
          <pointsMaterial
            size={1.5}
            vertexColors
            transparent
            opacity={0.5}
            blending={THREE.AdditiveBlending}
            depthTest={false}
          />
        </points>
      )}
      
      {/* Nebula background (appears last) */}
      {nebulaTexture && (
        <mesh ref={nebulaRef}>
          <sphereGeometry args={[500, 32, 32]} />
          <meshBasicMaterial
            map={nebulaTexture}
            side={THREE.BackSide}
            transparent
            opacity={0.7}
          />
        </mesh>
      )}
    </>
  )
}

export default BigBangSimulation